<div id="gfw-wrapper">
    <div data-lang="en-US">
        <h3 style="display: none;">Fetching IP information...</h3>
        <div style="display: none;">
            <h3>It might be GFWed</h3>
            <p>
                If simply refreshing the page doesn't help, this error then might be caused by the Great Firewall of China.
                You can
                <button id="new-rule-button-en-us" class="center"></button>
            </p>
        </div>
    </div>
    <div data-lang="zh-CN">
        <h3 style="display: none;">正在获取 IP 信息...</h3>
        <div style="display: none;">
            <h3>可能是被墙了</h3>
            <p>
                如果刷新页面没有用, 这个错误则可能是防火长城引起的.
                你可以
                <button id="new-rule-button-zh-cn" class="center"></button>
            </p>
        </div>
    </div>
</div>
<script>
    function require(url, callback, callbackQueryName, callbackName) {
        var head = document.getElementsByTagName("head")[0];
        var script = document.createElement("script");
        script.type = "text/javascript";
        script.async = true;
        
        if (arguments.length == 3) {
            callbackName = "callback_" + Math.floor(Math.random() * 9999999999999999);
        }

        if (callbackQueryName) {
            url += "&" + callbackQueryName + "=" + callbackName;
        }
        
        script.src = url;

        if (callbackQueryName) {
            window[callbackName] = function () {
                window[callbackName] = undefined;
                head.removeChild(script);
                callback.apply(this, arguments);
            };
        }

        head.insertBefore(script, head.firstChild);
    }

    var cookies = {
        getItem: function (sKey) {
            return unescape(document.cookie.replace(new RegExp("(?:(?:^|.*;)\\s*" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=\\s*([^;]*).*$)|^.*$"), "$1")) || null;
        },
        setItem: function (sKey, sValue, vEnd, sPath, sDomain, bSecure) {
            if (!sKey || /^(?:expires|max\-age|path|domain|secure)$/i.test(sKey)) { return false; }
            var sExpires = "";
            if (vEnd) {
                switch (vEnd.constructor) {
                    case Number:
                        sExpires = vEnd === Infinity ? "; expires=Fri, 31 Dec 9999 23:59:59 GMT" : "; max-age=" + vEnd;
                        break;
                    case String:
                        sExpires = "; expires=" + vEnd;
                        break;
                    case Date:
                        sExpires = "; expires=" + vEnd.toGMTString();
                        break;
                }
            }
            document.cookie = escape(sKey) + "=" + escape(sValue) + sExpires + (sDomain ? "; domain=" + sDomain : "") + (sPath ? "; path=" + sPath : "") + (bSecure ? "; secure" : "");
            return true;
        },
        removeItem: function (sKey, sPath) {
            if (!sKey || !this.hasItem(sKey)) { return false; }
            document.cookie = escape(sKey) + "=; expires=Thu, 01 Jan 1970 00:00:00 GMT" + (sPath ? "; path=" + sPath : "");
            return true;
        },
        hasItem: function (sKey) {
            return (new RegExp("(?:^|;\\s*)" + escape(sKey).replace(/[\-\.\+\*]/g, "\\$&") + "\\s*\\=")).test(document.cookie);
        }
    };
</script>
<script>
    (function () {
        var url = window.location.href;
        var host = window.location.host;
        var ip = "@host-ip@";
        var toggle;

        var rule;
        if (window.location.protocol == "http:" && pageStatus == 502) {
            var path = location.pathname + location.search;
            var pathReStr = path == "/" ? "" : path.replace(/([\.\?\+\*\(\)\{\}\[\]\\])/g, "\\$1");
            rule = (pathReStr ? host : "." + (host.indexOf("www.") == 0 ? host.substr(4) : host)) + ":80";
        }
        else {
            rule = (/\d$/.test(host) ? "" : ".") + (host.indexOf("www.") == 0 ? host.substr(4) : host);
        }

        var lang;
        var langs = {
            "en-US": {
                buttonId: "new-rule-button-en-us",
                addAndTry: 'Add "{rule}" as custom rule and try again',
                adding: "Adding new rule...",
                addTimeout: "Adding new rule timeout, please try again.",
                doesNotWorkAndRemove: "It doesn't seem to work, click to removed this rule",
                testing: "Testing...",
                sorry: "Sorry for the pain...",
                workAndSubmitting: "It seems to work, submitting this rule...",
                refreshing: "Refreshing...",
                workAndRefreshing: "It seems to work, refreshing...",
                noRetry: 'It is recommended to retry before adding a new rule. Click "OK" to retry or "Cancel" to continue adding this rule.'
            },
            "zh-CN": {
                buttonId: "new-rule-button-zh-cn",
                addAndTry: '添加 "{rule}" 到自定义规则并重试',
                adding: "正在添加新规则...",
                addTimeout: "添加新规则超时, 请重试.",
                doesNotWorkAndRemove: "似乎没有作用, 点击移除此规则",
                testing: "正在测试...",
                sorry: "表示同情...",
                workAndSubmitting: "似乎有用, 正在提交这条规则...",
                refreshing: "正在刷新...",
                workAndRefreshing: "似乎有用, 正在刷新...",
                noRetry: '在添加新规则前建议先刷新页面重试. 点击 "确认" 重试, 或者点击 "取消" 继续添加该规则.'
            }
        };

        var failedMarkName = "x-wall-failed-mark";
        
        var retried = !!cookies.getItem(failedMarkName);
        cookies.setItem(failedMarkName, "x");

        var button;

        window.onlangready = function () {
            var wrapper = document.getElementById("gfw-wrapper");
            var h3 = wrapper.getElementsByTagName("h3")[0];
            var content = wrapper.getElementsByTagName("div")[0].getElementsByTagName("div")[0];

            function hideSubTitle() {
                h3.style.display = "none";
            }

            function showSubTitle() {
                h3.style.display = "block";
            }

            function showContent() {
                lang = langs[pageLang];

                button = document.getElementById(lang.buttonId);

                var ruleShort = rule.length > 32 ? rule.substr(0, 29) + "..." : rule;
                initButton();

                button.onclick = function () {
                    if (window.pageStatus == 404 && !retried && confirm(lang.noRetry)) {
                        window.location = url;
                        return;
                    }

                    button.title = "";
                    button.disabled = true;
                    button.innerHTML = lang.adding;

                    require("http://localhost:14220/rule.ashx?new=" + encodeURIComponent(rule), function (done) {
                        if (done) {
                            startTest();
                        }
                        else {
                            initButton();
                            alert(lang.addTimeout);
                        }
                    }, "callback");
                };

                content.style.display = "block";

                function initButton() {
                    button.innerHTML = lang.addAndTry.replace("{rule}", ruleShort);
                    button.title = rule;
                    button.disabled = false;
                }
            }
            
            require("http://config.privoxy.org/show-url-info?url=" + encodeURIComponent(url), function (info) {
                if (!info.rule || info.rule == "online-default") {
                    if (ip != "unknown") {
                        var ipNumbers = [];
                        var ipNumberStrs = ip.split(".");
                        for (var i = 0; i < ipNumberStrs.length; i++) {
                            ipNumbers[i] = Number(ipNumberStrs[i]);
                        }

                        if (
                            ipNumbers[0] == 10 ||
                            (ipNumbers[0] == 172 && ipNumbers[1] >= 16 && ipNumbers[1] <= 31) ||
                            (ipNumbers[0] == 192 && ipNumbers[1] == 168) ||
                            ip == "127.0.0.1"
                        ) {
                            return;
                        }

                        showSubTitle();
                        fetchIpInfo();
                    }
                    else {
                        showContent();
                    }
                }
            }, "callback", "urlInfoCallback");

            function fetchIpInfo() {
                require("http://int.dpool.sina.com.cn/iplookup/iplookup.php?format=js&ip=" + ip);

                var timer = setInterval(function () {
                    if ("remote_ip_info" in window) {
                        clearInterval(timer);
                        hideSubTitle();
                        if (remote_ip_info && (remote_ip_info.country != "中国" || /香港|台湾/.test(remote_ip_info.province))) {
                            showContent();
                        }
                    }
                }, 100);
            }
        };

        function startTest() {
            button.innerHTML = lang.testing;

            var max = 3;
            var count = 0;

            next();
            function next() {
                if (count++ >= max) {
                    button.innerHTML = lang.doesNotWorkAndRemove;
                    button.disabled = false;

                    button.onclick = function () {
                        require("http://localhost:14220/rule.ashx?del=" + encodeURIComponent(rule), function () { });
                        button.disabled = true;
                        button.innerHTML = lang.sorry;
                    };

                    return;
                }

                var xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject("MSXML2.XMLHTTP");
                xhr.open("GET", url);
                xhr.setRequestHeader("If-Modified-Since", "0");

                setTimeout(function () {
                    xhr.send(null);
                }, 1000);

                xhr.onreadystatechange = function () {
                    if (xhr.readyState == 4 || xhr.readyState == 3 && xhr.responseText.length > 50) {
                        xhr.onreadystatechange = function () { };
                        var text = xhr.responseText;
                        try {
                            xhr.abort();
                        } catch (e) { }

                        if (!/^<![^>]+>\s*<!--PrivoxyMark-->/.test(text)) {
                            refresh();
                        }
                        else {
                            next();
                        }
                    }
                };
            }
        }

        function refresh() {
            button.innerHTML = lang.workAndRefreshing;
            button.disabled = true;

            window.location = url;
        }
    })();
</script>